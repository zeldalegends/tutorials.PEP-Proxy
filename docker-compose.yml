version: "3.9"

services:
  # Orion is the context broker
  orion:
    image: fiware/orion #:3.7.0
    hostname: orion
    container_name: fiware-orion
    depends_on:
      - mongo-db
    networks:
      - default
    expose:
      - 1026
    ports:
      - 1026:1026 # http://localhost:1026
    command: -dbhost mongo-db -logLevel DEBUG
#   healthcheck:
#     test: curl --fail -s http://orion:1026/version || exit 1
#     interval: 15s

  # Orion LD is another context broker
  orion-ld:
    image: fiware/orion-ld:1.1.1 # latest stable (1.0.1 latest succesfully tested) 
    hostname: orion-ld
    container_name: fiware-orion-ld
    depends_on:
      - mongo-db
    networks:
      - default
    expose:
      - 1026
    ports:
      - 1028:1026 # http://localhost:1028
    command: -dbhost mongo-db -db orionld -logLevel DEBUG
    healthcheck:
      test: curl --fail -s http://orion-ld:1026/version || exit 1
      interval: 15s

  # Apache server for NGSI-LD @context files
  ld-context:
    image: httpd:alpine
    hostname: ld-context
    container_name: fiware-ld-context
    networks:
      - default
    expose:
      - 80
    ports:
      - 80:80 # http://localhost
    volumes:
      - ./public:/usr/local/apache2/htdocs/
    healthcheck:
      test: curl -f http://localhost || exit 1
      interval: 15s

#  # IoT-Agent is configured for the UltraLight Protocol
#  iot-agent:
#    image: fiware/iotagent-ul #:1.20.0-distroless
#    hostname: iot-agent
#    container_name: fiware-iot-agent
#    depends_on:
#      - mongo-db
#      - orion
#    networks:
#      - default
#    expose:
#      - 4041
#      - 7896
#    ports:
#      - 4041:4041 # http://localhost:4041
#      - 7896:7896 # http://localhost:7896
#    environment:
#      - IOTA_CB_HOST=orion # name of the context broker to update context
#      - IOTA_CB_PORT=1026 # port the context broker listens on to update context
#      - IOTA_NORTH_PORT=4041
#      - IOTA_REGISTRY_TYPE=mongodb #Whether to hold IoT device info in memory or in a database
#      - IOTA_LOG_LEVEL=DEBUG # The log level of the IoT Agent
#      - IOTA_TIMESTAMP=true # Supply timestamp information with each measurement
#      - IOTA_CB_NGSI_VERSION=v2 # use NGSIv2 when sending updates for active attributes
#      - IOTA_AUTOCAST=true # Ensure Ultralight number values are read as numbers not strings
#      - IOTA_MONGO_HOST=mongo-db # The host name of MongoDB
#      - IOTA_MONGO_PORT=27017 # The port mongoDB is listening on
#      - IOTA_MONGO_DB=iotagentul # The name of the database used in mongoDB
#      - IOTA_HTTP_PORT=7896 # The port used for device traffic over HTTP
#      - IOTA_PROVIDER_URL=http://iot-agent:4041
#    healthcheck:
#      interval: 15s

  # IoT-Agent is configured for JSON over MQTT
  iot-agent:
    image: fiware/iotagent-json #:1.24.0-distroless
    hostname: iot-agent
    container_name: fiware-iot-agent
    depends_on:
      - mongo-db
      - mosquitto
      - orion
    networks:
      - default
    expose:
      - 4041
      - 7896 
    ports:
      - 4041:4041 # http://localhost:4041
      - 7896:7896 # http://localhost:7896
    environment:
      - IOTA_CB_HOST=orion-proxy # name of the context broker to update context
      - IOTA_CB_PORT=1027 # port the context broker listens on to update context
      - IOTA_NORTH_PORT=4041
      - IOTA_REGISTRY_TYPE=mongodb #Whether to hold IoT device info in memory or in a database
      - IOTA_LOG_LEVEL=DEBUG # The log level of the IoT Agent
#     - IOTA_DEFAULT_EXPRESSION_LANGUAGE=jexl
      - IOTA_TIMESTAMP=true # Supply timestamp information with each measurement
      - IOTA_CB_NGSI_VERSION=v2 # use NGSIv2 when sending updates for active attributes
      - IOTA_AUTOCAST=true # Ensure Ultralight number values are read as numbers not strings
      - IOTA_MONGO_HOST=mongo-db # The host name of MongoDB
      - IOTA_MONGO_PORT=27017 # The port mongoDB is listening on
      - IOTA_MONGO_DB=iotagentjson # The name of the database used in mongoDB
#     - IOTA_HTTP_PORT=7896 # The port used for device traffic over HTTP
      - IOTA_MQTT_HOST=mqtt # The host name of the MQTT Broker
      - IOTA_MQTT_PORT=1883 # The port the MQTT Broker is listening on to receive topics
#     - IOTA_DEFAULT_RESOURCE=/iot/json
      - IOTA_DEFAULT_RESOURCE= # Default is blank. I'm using MQTT so I don't need a resource
      - IOTA_PROVIDER_URL=http://iot-agent:4041
      - IOTA_DEFAULT_TRANSPORT=MQTT
      - IOTA_AUTH_ENABLED=true
      - IOTA_AUTH_TYPE=oauth2
      - IOTA_AUTH_HEADER=Authorization
      - IOTA_AUTH_HOST=keyrock
      - IOTA_AUTH_PORT=3005
      - IOTA_AUTH_URL=http://keyrock:3005
      - IOTA_AUTH_CLIENT_ID=tutorial-dckr-site-0000-xpresswebapp
      - IOTA_AUTH_CLIENT_SECRET=tutorial-dckr-host-0000-clientsecret
      - IOTA_AUTH_PERMANENT_TOKEN=true
      - IOTA_AUTH_TOKEN_PATH=/oauth2/token
#   healthcheck:
#     interval: 15s
      
  # Keyrock is an Identity Management Front-End
  keyrock:
    image: fiware/idm #:8.3.0-distroless
    #image: keyrock-slim
    hostname: keyrock
    container_name: fiware-keyrock
    depends_on:
      - mysql-db
    networks:
      - default
    expose:
      - 3005
    ports:
      - 3005:3005 # http://localhost:3005
    environment:
      - DEBUG=idm:*
      - IDM_DB_HOST=mysql-db
#     - IDM_DB_PASS_FILE=/run/secrets/my_secret_data
      - IDM_DB_PASS=secret
      - IDM_DB_USER=root
      - IDM_HOST=http://localhost:3005
      - IDM_PORT=3005
      - IDM_HTTPS_ENABLED=false
      - IDM_HTTPS_PORT=3443
      - IDM_ADMIN_USER=alice
      - IDM_ADMIN_EMAIL=alice-the-admin@test.com
      - IDM_ADMIN_PASS=test
      - IDM_CSP_FORM_ACTION=*
#   secrets:
#     - my_secret_data
#   healthcheck:
#     interval: 25s

  # PEP Proxy for Orion
  orion-proxy:
    #image: pep-slim
    image: fiware/pep-proxy #:8.3.0-distroless
    hostname: orion-proxy
    container_name: fiware-orion-proxy
    depends_on:
      keyrock:
        condition: service_started
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - default
    expose:
      - 1027
    ports:
      - 1027:1027 # http://localhost:1027
    environment:
      - DEBUG=pep-proxy:*
      - PEP_PROXY_DEBUG=true
      - PEP_PROXY_APP_HOST=orion
      - PEP_PROXY_APP_PORT=1026
      - PEP_PROXY_PORT=1027
      - PEP_PROXY_IDM_HOST=keyrock
      - PEP_PROXY_HTTPS_ENABLED=false
      - PEP_PROXY_AUTH_ENABLED=false
      - PEP_PROXY_IDM_SSL_ENABLED=false
      - PEP_PROXY_IDM_PORT=3005
      - PEP_PROXY_APP_ID=tutorial-dckr-site-0000-xpresswebapp
      - PEP_PROXY_USERNAME=pep_proxy_00000000-0000-0000-0000-000000000000
      - PEP_PASSWORD=test
      - PEP_PROXY_PDP=idm
      - PEP_PROXY_MAGIC_KEY=1234
      - PEP_PROXY_PUBLIC_PATHS=/version
    healthcheck:
      interval: 50s

  # PEP Proxy for Orion LD
  orion-ld-proxy:
    #image: pep-slim
    image: fiware/pep-proxy #:8.3.0-distroless
    hostname: orion-ld-proxy
    container_name: fiware-orion-ld-proxy
    depends_on:
      keyrock:
        condition: service_started
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - default
    expose:
      - 1029
    ports:
      - 1029:1029 # http://localhost:1029
    environment:
      - DEBUG=pep-proxy:*
      - PEP_PROXY_DEBUG=true
      - PEP_PROXY_APP_HOST=orion-ld
      - PEP_PROXY_APP_PORT=1026
      - PEP_PROXY_PORT=1029
      - PEP_PROXY_IDM_HOST=keyrock
      - PEP_PROXY_HTTPS_ENABLED=false
      - PEP_PROXY_AUTH_ENABLED=false
      - PEP_PROXY_IDM_SSL_ENABLED=false
      - PEP_PROXY_IDM_PORT=3005
      - PEP_PROXY_APP_ID=tutorial-dckr-site-0000-xpresswebapp
      - PEP_PROXY_USERNAME=pep_proxy_00000000-0000-0000-0000-000000000000
      - PEP_PASSWORD=test
      - PEP_PROXY_PDP=idm
      - PEP_PROXY_MAGIC_KEY=1234
      - PEP_PROXY_PUBLIC_PATHS=/version
    healthcheck:
      interval: 50s

#  # Tutorial acts as a series of dummy IoT Sensors over HTTP
#  tutorial:
#    image: fiware/tutorials.context-provider
#    hostname: iot-sensors
#    container_name: fiware-tutorial
#    depends_on:
#      orion-proxy :
#        condition: service_started
#      iot-agent:
#        condition: service_started
#      keyrock:
#        condition: service_started
#    networks:
#      default:
#        aliases:
#          - tutorial
#          - context-provider
#    expose:
#      - 3000
#      - 3001
#    ports:
#      - 3000:3000 # http://localhost:3000
#      - 3001:3001 # http://localhost:3001
#    environment:
#      - "MONGO_URL=mongodb://mongo-db:27017"
#      - "DEBUG=tutorial:*"
#      - "WEB_APP_PORT=3000" # Port used by the content provider proxy and web-app for viewing data
#      - "IOTA_HTTP_HOST=iot-agent"
#      - "IOTA_HTTP_PORT=7896"
#      - "IOTA_DEFAULT_RESOURCE=/iot/d"
#      - "DUMMY_DEVICES_PORT=3001" # Port used by the dummy IOT devices to receive commands
#      - "DUMMY_DEVICES_TRANSPORT=HTTP" # Default transport used by dummy Io devices
#      - "CONTEXT_BROKER=http://orion-proxy:1027/v2" # URL of the PEP Proxy to update context
#      - "OPENWEATHERMAP_KEY_ID=<ADD_YOUR_KEY_ID>"
#      - "TWITTER_CONSUMER_KEY=<ADD_YOUR_CONSUMER_KEY>"
#      - "TWITTER_CONSUMER_SECRET=<ADD_YOUR_CONSUMER_SECRET>"
#      - "NGSI_LD_PREFIX="
#      - "SECURE_ENDPOINTS=true"
#      - "KEYROCK_URL=http://localhost"
#      - "KEYROCK_IP_ADDRESS=http://keyrock"
#      - "KEYROCK_PORT=3005"
#      - "KEYROCK_CLIENT_ID=tutorial-dckr-site-0000-xpresswebapp"
#      - "KEYROCK_CLIENT_SECRET=tutorial-dckr-site-0000-clientsecret"
#      - "CALLBACK_URL=http://localhost:3000/login"

#  # Sample Express App
# express-app:
#   build: ./express-app
#   hostname: express-app
#   container_name: express-app
#   networks:
#     - default
#   expose:
#     - 8000
#   ports:
#     - 8000:8000 # http://localhost:8000
#   healthcheck: 
#     test: curl -f http://localhost:8000/test || exit 1
  
# # PEP Proxy for Express App
# express-app-proxy:
#   #image: pep-slim
#   image: fiware/pep-proxy #:8.3.0-distroless
#   hostname: express-app-proxy
#   container_name: express-app-proxy
#   depends_on:
#     keyrock:
#       condition: service_started
#   deploy:
#     restart_policy:
#       condition: on-failure
#   networks:
#     - default
#   expose:
#     - 8001
#   ports:
#     - 8001:8001 # http://localhost:8001
#   environment:
#     - DEBUG=pep-proxy:*
#     - PEP_PROXY_DEBUG=true
#     - PEP_PROXY_APP_HOST=express-app
#     - PEP_PROXY_APP_PORT=8000
#     - PEP_PROXY_PORT=8001
#     - PEP_PROXY_IDM_HOST=keyrock
#     - PEP_PROXY_HTTPS_ENABLED=false
#     - PEP_PROXY_AUTH_ENABLED=false
#     - PEP_PROXY_IDM_SSL_ENABLED=false
#     - PEP_PROXY_IDM_PORT=3005
#     - PEP_PROXY_APP_ID=tutorial-dckr-site-0000-xpresswebapp
#     - PEP_PROXY_USERNAME=pep_proxy_00000000-0000-0000-0000-000000000000
#     - PEP_PASSWORD=test
#     - PEP_PROXY_PDP=idm
#     - PEP_PROXY_MAGIC_KEY=1234
#     - PEP_PROXY_PUBLIC_PATHS=/version
#   healthcheck:
#     interval: 50s

#  # Sample Web App
#  web-app:
#    image: node
#    container_name: fiware-web-app
#    hostname: web-app
#    networks:
#      - default
#    expose:
#      - 8082
#    ports:
#      - 8082:8082 # http://localhost:8002
#    command: node -e \
#      "const PORT=8082;
#       var http=require('http');
#       var parser=require('querystring');
#       http.createServer(function(req, res) {
#         if (req.url.startsWith('/test?')) {
#           var test = parser.parse(req.url.replace('/test?', ''));
#           if (test.t > 75) test._result = 'Possible short-circuit or spark-gap in device ' + test.d + '.';
#           if (test.t < 25) test._result = 'Is device ' + test.d + ' shut down?';
#           res.write(JSON.stringify(test));
#         } else {
#           if (req.url.startsWith('/v'))
#             res.write('1.0.0, by Alerox 2022.');
#           else
#             res.write('<html>' +
#               '<h1>Simple ADS</h1>' +
#               '<h3>by Alerox, 2022</h3>' +
#               'Usage <code>/test?d=device&t=temperature</code></html>');
#         }
#         res.end();
#       }).listen(PORT);
#       console.log('Server started on port ' + PORT);"
#    healthcheck: 
#      test: curl -f http://localhost:8082/test || exit 1
  
#  # PEP Proxy for Web App
#  web-app-proxy:
#    #image: pep-slim
#    image: fiware/pep-proxy #:8.3.0-distroless
#    container_name: fiware-web-app-proxy
#    hostname: web-app-proxy
#    networks:
#      - default
#    depends_on:
#      keyrock:
#        condition: service_started
#    deploy:
#      restart_policy:
#        condition: on-failure
#    expose:
#      - 8083
#    ports:
#      - 8083:8083 # http://localhost:8003
#    environment:
#      - DEBUG=pep-proxy:*
#      - PEP_PROXY_DEBUG=true
#      - PEP_PROXY_APP_HOST=web-app
#      - PEP_PROXY_APP_PORT=8082
#      - PEP_PROXY_PORT=8083
#      - PEP_PROXY_IDM_HOST=keyrock
#      - PEP_PROXY_HTTPS_ENABLED=false
#      - PEP_PROXY_AUTH_ENABLED=false
#      - PEP_PROXY_IDM_SSL_ENABLED=false
#      - PEP_PROXY_IDM_PORT=3005
#      - PEP_PROXY_APP_ID=tutorial-dckr-site-0000-xpresswebapp
#      - PEP_PROXY_USERNAME=pep_proxy_00000000-0000-0000-0000-000000000000
#      - PEP_PASSWORD=test
#      - PEP_PROXY_PDP=idm
#      - PEP_PROXY_MAGIC_KEY=1234
#      - PEP_PROXY_PUBLIC_PATHS=/version
#    healthcheck:
#      interval: 50s

  # Node-RED for flow-programming automation
  node-red:
    build: ./node-red
    #image: nodered/node-red #:3.0.2
    hostname: node-red
    container_name: node-red
    networks:
      - default
    expose:
      - 1880
    ports:
      - 1880:1880 # http://localhost:1880
    environment:
      - TZ=Europe/Amsterdam
    volumes:
#     - node-red-data:/data
      - ./node-red/data:/data

  # PEP Proxy for Node-RED
  node-red-proxy:
    #image: pep-slim
    image: fiware/pep-proxy #:8.3.0-distroless
    hostname: node-red-proxy
    container_name: node-red-proxy
    depends_on:
      keyrock:
        condition: service_started
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - default
    expose:
      - 1881
    ports:
      - 1881:1881 # http://localhost:1881
    environment:
      - DEBUG=pep-proxy:*
      - PEP_PROXY_DEBUG=true
      - PEP_PROXY_APP_HOST=node-red
      - PEP_PROXY_APP_PORT=1880
      - PEP_PROXY_PORT=1881
      - PEP_PROXY_IDM_HOST=keyrock
      - PEP_PROXY_HTTPS_ENABLED=false
      - PEP_PROXY_AUTH_ENABLED=false
      - PEP_PROXY_IDM_SSL_ENABLED=false
      - PEP_PROXY_IDM_PORT=3005
      - PEP_PROXY_APP_ID=tutorial-dckr-site-0000-xpresswebapp
      - PEP_PROXY_USERNAME=pep_proxy_00000000-0000-0000-0000-000000000000
      - PEP_PASSWORD=test
      - PEP_PROXY_PDP=idm
      - PEP_PROXY_MAGIC_KEY=1234
      - PEP_PROXY_PUBLIC_PATHS=/version
    healthcheck:
      interval: 50s


  # Databases and frontends

  # Apache Cassandra is a distributed, wide-column, NoSQL database
  cassandra-db:
    image: cassandra #:4.0
    hostname: cassandra-db
    container_name: db-cassandra
    networks:
      - default
    expose:
#     - 7000
      - 9042
    ports:
#     - 7000:7000 # http://localhost:7000
      - 9042:9042 # http://localhost:9042
    volumes:
      - ./cassandra/.db:/var/lib/cassandra/data
    healthcheck:
      test: ["CMD-SHELL", "[ $$(nodetool statusgossip) = running ]"]
      interval: 5s
      timeout: 10s
      retries: 6

  # InfluxDB is a time series database
  influx-db:
    image: influxdb #:2.4.0-alpine
    hostname: influx-db
    container_name: db-influx
    networks:
      - default
    expose:
      - 8086
    ports:
      - 8086:8086 # http://localhost:8086
#   env_file:
#     - ./influx/influxdb.env
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=influxdb
      - DOCKER_INFLUXDB_INIT_ORG=myorganization
      - DOCKER_INFLUXDB_INIT_BUCKET=mybucket
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=myadmintoken
    volumes:
#     - influx-data:/var/lib/influxdb2
      - ./influx/.db:/var/lib/influxdb2
      - ./influx/config.yml:/etc/influxdb2/config.yml
    healthcheck:
      test: curl -f http://localhost:8086/ping || exit 1
#     interval: 10s
#     timeout: 10s
#     retries: 5
#     start_period: 40s

  # MongoDB is a non-relational document database
  mongo-db:
    image: mongo:5 #:5.0.11 # compliant with Orion LD
    hostname: mongo-db
    container_name: db-mongo
    networks:
      - default
    expose:
      - 27017
    ports:
      - 27017:27017 # http://localhost:27017
    command: --nojournal
    volumes:
#     - mongo-data:/data/db
      - ./mongo/.db:/data/db
#     - mongo-config:/data/configdb
      - ./mongo:/data/configdb
      - ./mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    healthcheck:
      test: |
        mongo --quiet 127.0.0.1/test --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)' && echo 0 || echo 1
#       mongo --quiet mongo-db/test --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)' && echo 0 || echo 1
#       host=`hostname --ip-address || echo '127.0.0.1'`; 
#       mongo --quiet $host/test --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)' && echo 0 || echo 1
      interval: 25s

  mongo-express:
    image: mongo-express #:1.0.0-alpha
    hostname: mongo-express
    container_name: mongo-express
    depends_on:
      mongo-db:
        condition: service_healthy
    networks:
      - default
    expose:
      - 8081
    ports:
      - 8081:8081 # http://localhost:8081
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo-db
    healthcheck:
      test: curl -f http://localhost:8081 || exit 1
#     interval: 25s
#     timeout: 5s
#     retries: 20

  mysql-db:
  # docker exec db-mysql /usr/bin/mysqldump --databases -u root --password=secret idm > backup.sql # backup
  # cat backup.sql | docker exec -i db-mysql /usr/bin/mysql -u root --password=secret idm # restore
    restart: on-failure
    image: mysql #:8.0.31 # compliant with the provided dump
    hostname: mysql-db
    container_name: db-mysql
    networks:
      - default
    expose:
      - 3306
    ports:
      - 3306:3306 # http://localhost:3306
    environment:
#     - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/my_secret_data
      - MYSQL_ROOT_PASSWORD=secret
      - MYSQL_ROOT_HOST=% # Allow any container to access this database
    volumes:
#     - mysql-data:/var/lib/mysql
      - ./mysql/.db:/var/lib/mysql
      - ./mysql/backup.sql:/docker-entrypoint-initdb.d/backup.sql:ro
#   secrets:
#     - my_secret_data
    healthcheck:
      test: mysqladmin ping -h localhost
      timeout: 20s
      retries: 10


  # Other services

  ganache:
    image: trufflesuite/ganache #:v7.4.4
    hostname: ganache
    container_name: truffle-ganache
    networks:
      - default
    expose:
      - 7545
    ports:
      - 7545:7545 # http://localhost:7545
    command: --database.dbPath /db --server.host 0.0.0.0  --server.port 7545 --wallet.mnemonic "visit carpet logic blame furnace confirm rebel deliver medal mean illness error"
    volumes:
      - ./ganache/.db:/db
    healthcheck:
      test: ganache --chain.chainId  # curl -f http://localhost:7545 || exit 1

  # Grafana is an open source analytics & monitoring solution for every database
  grafana:
    image: grafana/grafana-enterprise #:9.2.0
    hostname: grafana
    container_name: grafana
    depends_on:
      influx-db:
        condition: service_healthy
    networks:
      - default
    expose:
      - 3000
    ports:
      - 3000:3000 # http://localhost:3000
#   env_file:
#     - ./grafana/grafana.env
    environment:
      - GF_DEFAULT_INSTANCE_NAME=setup
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource # ,briangann-gauge-panel,natel-plotly-panel
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
#   user: "0"
    volumes:
#     - grafana_data:/var/lib/grafana
      - ./grafana/.db:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/etc/dashboards
    healthcheck:
      test: curl -f http://localhost:3000/api/health || exit 1
#     interval: 10s
#     timeout: 10s
#     retries: 5
#     start_period: 40s

  mosquitto:
  # docker exec mqtt-broker mosquitto_pub -t "telegraf/sensor/01" -m '{"id":"TT001","temperature":24}'
  # docker exec mqtt-broker mosquitto_sub -t "telegraf/#"
    image: eclipse-mosquitto #:1.6.15
    hostname: mosquitto
    container_name: mqtt-broker
    networks:
      - default
    expose:
      - 1883
#     - 9001
    ports:
      - 1883:1883 # http://localhost:1883
      - 9001:9001 # http://localhost:9001
    volumes:
      - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
    healthcheck:
      test: timeout 5 mosquitto_sub -t '$$SYS/#' -C 1 | grep -v Error || exit 1
#     interval: 10s
#     timeout: 10s
#     retries: 6

  # Telegraf is an open source plugin-driven server agent for collecting and reporting metrics
  telegraf:
    image: telegraf #:1.24.2
    hostname: telegraf
    container_name: telegraf
    depends_on:
      influx-db: 
        condition: service_healthy
    networks:
      - default
    expose:
      - 8125
#     - 8125/udp
    ports:
      - 8125:8125 # http://localhost:8125 # healthcheck
#     - 8125:8125/udp
#   env_file:
#     - ./telegraf/telegraf.env
    environment:
      - INFLUXDB_INIT_ORG=myorganization
      - INFLUXDB_INIT_BUCKET=mybucket
      - INFLUXDB_INIT_ADMIN_TOKEN=myadmintoken
    volumes:
      - ./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
    healthcheck:
      test: curl -f http://localhost:8125 || exit 1

networks:
  default:

# volumes:
#   grafana_data: ~ 
#   influx-data: ~
#   mysql-data: ~
#   mongo-data: ~
#   mongoconfig: ~
#   node-red-data: ~

# secrets:
#   my_secret_data:
#     file: ./secrets.txt
