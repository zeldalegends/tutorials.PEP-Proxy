# WARNING: Do not deploy this tutorial configuration directly to a production environment
#
# The tutorial docker-compose files have not been written for production deployment and will not 
# scale. A proper architecture has been sacrificed to keep the narrative focused on the learning 
# goals, they are just used to deploy everything onto a single Docker machine. All FIWARE components 
# are running at full debug and extra ports have been exposed to allow for direct calls to services. 
# They also contain various obvious security flaws - passwords in plain text, no load balancing,
# no use of HTTPS and so on. 
# 
# This is all to avoid the need of multiple machines, generating certificates, encrypting secrets
# and so on, purely so that a single docker-compose file can be read as an example to build on, 
# not use directly. 
# 
# When deploying to a production environment, please refer to the Helm Repository
# for FIWARE Components in order to scale up to a proper architecture:
# 
# see: https://github.com/FIWARE/helm-charts/
#
version: "3.9"
services:
  # Orion is the context broker
  orion:
    image: fiware/orion:${ORION_VERSION}
    hostname: orion
    container_name: fiware-orion
    depends_on:
      - mongo-db
    networks:
      - default
    expose:
      - "${ORION_PORT}"
    ports:
      - "${ORION_PUBLIC_PORT}:${ORION_PORT}" # localhost:1026
    command: -dbhost mongo-db -logLevel DEBUG
    healthcheck:
      test: curl --fail -s http://orion:${ORION_PORT}/version || exit 1
      interval: 15s

  orion-ld:
    image: fiware/orion-ld:${ORION_LD_VERSION}
    hostname: orion-ld
    container_name: fiware-orion-ld
    depends_on:
      - mongo-db
    networks:
      - default
    expose:
      - "${ORION_LD_PORT}"
    ports:
      - "${ORION_LD_PUBLIC_PORT}:${ORION_LD_PORT}" # localhost:1028
    command: -dbhost mongo-db -db orionld -logLevel DEBUG
    healthcheck:
      test: curl --fail -s http://orion-ld:${ORION_LD_PORT}/version || exit 1
      interval: 15s

  # IoT-Agent is configured for the UltraLight Protocol
  iot-agent:
    image: fiware/iotagent-ul:${ULTRALIGHT_VERSION}
    hostname: iot-agent
    container_name: fiware-iot-agent
    depends_on:
      - mongo-db
      - orion
    networks:
      - default
    ports:
      - "${IOTA_NORTH_PORT}:${IOTA_NORTH_PORT}" # localhost:4041
      - "${IOTA_SOUTH_PORT}:${IOTA_SOUTH_PORT}" # localhost:7896
    environment:
      - IOTA_CB_HOST=orion # name of the context broker to update context
      - IOTA_CB_PORT=${ORION_PORT} # port the context broker listens on to update context
      - IOTA_NORTH_PORT=${IOTA_NORTH_PORT}
      - IOTA_REGISTRY_TYPE=mongodb #Whether to hold IoT device info in memory or in a database
      - IOTA_LOG_LEVEL=DEBUG # The log level of the IoT Agent
      - IOTA_TIMESTAMP=true # Supply timestamp information with each measurement
      - IOTA_CB_NGSI_VERSION=v2 # use NGSIv2 when sending updates for active attributes
      - IOTA_AUTOCAST=true # Ensure Ultralight number values are read as numbers not strings
      - IOTA_MONGO_HOST=mongo-db # The host name of MongoDB
      - IOTA_MONGO_PORT=${MONGO_DB_PORT} # The port mongoDB is listening on
      - IOTA_MONGO_DB=iotagentul # The name of the database used in mongoDB
      - IOTA_HTTP_PORT=${IOTA_SOUTH_PORT} # The port used for device traffic over HTTP
      - IOTA_PROVIDER_URL=http://iot-agent:${IOTA_NORTH_PORT}
    healthcheck:
      interval: 15s


  # Keyrock is an Identity Management Front-End
  keyrock:
    image: fiware/idm:${KEYROCK_VERSION}
    #image: keyrock-slim
    container_name: fiware-keyrock
    hostname: keyrock
    networks:
      - default
    depends_on:
      - mysql-db
    ports:
      - "${KEYROCK_PORT}:${KEYROCK_PORT}" # localhost:3005
    environment:
      - DEBUG=idm:*
      - IDM_DB_HOST=mysql-db
      - IDM_DB_PASS_FILE=/run/secrets/my_secret_data
      - IDM_DB_USER=root
      - IDM_HOST=http://localhost:${KEYROCK_PORT}
      - IDM_PORT=${KEYROCK_PORT}
      - IDM_HTTPS_ENABLED=${IDM_HTTPS_ENABLED}
      - IDM_HTTPS_PORT=${KEYROCK_HTTPS_PORT}
      - IDM_ADMIN_USER=alice
      - IDM_ADMIN_EMAIL=alice-the-admin@test.com
      - IDM_ADMIN_PASS=test
    secrets:
      - my_secret_data
    healthcheck:
      interval: 25s


  # PEP Proxy for Orion
  orion-proxy:
    #image: pep-slim
    image: fiware/pep-proxy:${WILMA_VERSION}
    container_name: fiware-orion-proxy
    hostname: orion-proxy
    networks:
      - default
    depends_on:
      keyrock:
        condition: service_started
    deploy:
      restart_policy:
        condition: on-failure
    ports:
      - "${ORION_PROXY_PORT}:${ORION_PROXY_PORT}" # localhost:1027
    expose:
      - "${ORION_PROXY_PORT}"
    environment:
      - DEBUG=pep-proxy:*
      - PEP_PROXY_DEBUG=true
      - PEP_PROXY_APP_HOST=orion
      - PEP_PROXY_APP_PORT=${ORION_PORT}
      - PEP_PROXY_PORT=${ORION_PROXY_PORT}
      - PEP_PROXY_IDM_HOST=keyrock
      - PEP_PROXY_HTTPS_ENABLED=false
      - PEP_PROXY_AUTH_ENABLED=false
      - PEP_PROXY_IDM_SSL_ENABLED=false
      - PEP_PROXY_IDM_PORT=${KEYROCK_PORT}
      - PEP_PROXY_APP_ID=${KEYROCK_CLIENT_ID}
      - PEP_PROXY_USERNAME=${PEP_PROXY_USERNAME}
      - PEP_PASSWORD=test
      - PEP_PROXY_PDP=idm
      - PEP_PROXY_MAGIC_KEY=1234
      - PEP_PROXY_PUBLIC_PATHS=/version
    healthcheck:
      interval: 50s

  # PEP Proxy for Orion LD
  orion-ld-proxy:
    #image: pep-slim
    image: fiware/pep-proxy:${WILMA_VERSION}
    container_name: fiware-orion-ld-proxy
    hostname: orion-ld-proxy
    networks:
      - default
    depends_on:
      keyrock:
        condition: service_started
    deploy:
      restart_policy:
        condition: on-failure
    ports:
      - "${ORION_LD_PROXY_PORT}:${ORION_LD_PROXY_PORT}" # localhost:1029
    expose:
      - "${ORION_LD_PROXY_PORT}"
    environment:
      - DEBUG=pep-proxy:*
      - PEP_PROXY_DEBUG=true
      - PEP_PROXY_APP_HOST=orion-ld
      - PEP_PROXY_APP_PORT=${ORION_LD_PORT}
      - PEP_PROXY_PORT=${ORION_LD_PROXY_PORT}
      - PEP_PROXY_IDM_HOST=keyrock
      - PEP_PROXY_HTTPS_ENABLED=false
      - PEP_PROXY_AUTH_ENABLED=false
      - PEP_PROXY_IDM_SSL_ENABLED=false
      - PEP_PROXY_IDM_PORT=${KEYROCK_PORT}
      - PEP_PROXY_APP_ID=${KEYROCK_CLIENT_ID}
      - PEP_PROXY_USERNAME=${PEP_PROXY_USERNAME}
      - PEP_PASSWORD=test
      - PEP_PROXY_PDP=idm
      - PEP_PROXY_MAGIC_KEY=1234
      - PEP_PROXY_PUBLIC_PATHS=/version
    healthcheck:
      interval: 50s

  # Tutorial acts as a series of dummy IoT Sensors over HTTP
  tutorial:
    image: fiware/tutorials.context-provider
    hostname: iot-sensors
    container_name: fiware-tutorial
    depends_on:
      orion-proxy :
        condition: service_started
      iot-agent:
        condition: service_started
      keyrock:
        condition: service_started
    networks:
      default:
        aliases:
          - tutorial
          - context-provider
    expose:
      - "${TUTORIAL_APP_PORT}"
      - "${TUTORIAL_DUMMY_DEVICE_PORT}"
    ports:
      - "${TUTORIAL_APP_PORT}:${TUTORIAL_APP_PORT}" # localhost:3000
      - "${TUTORIAL_DUMMY_DEVICE_PORT}:${TUTORIAL_DUMMY_DEVICE_PORT}" # localhost:3001
    environment:
      - "MONGO_URL=mongodb://mongo-db:27017"
      - "DEBUG=tutorial:*"
      - "WEB_APP_PORT=${TUTORIAL_APP_PORT}" # Port used by the content provider proxy and web-app for viewing data
      - "IOTA_HTTP_HOST=iot-agent"
      - "IOTA_HTTP_PORT=${IOTA_SOUTH_PORT}"
      - "IOTA_DEFAULT_RESOURCE=/iot/d"
      - "DUMMY_DEVICES_PORT=${TUTORIAL_DUMMY_DEVICE_PORT}" # Port used by the dummy IOT devices to receive commands
      - "DUMMY_DEVICES_TRANSPORT=HTTP" # Default transport used by dummy Io devices
      - "CONTEXT_BROKER=http://orion-proxy:${ORION_PROXY_PORT}/v2" # URL of the PEP Proxy to update context
      - "OPENWEATHERMAP_KEY_ID=<ADD_YOUR_KEY_ID>"
      - "TWITTER_CONSUMER_KEY=<ADD_YOUR_CONSUMER_KEY>"
      - "TWITTER_CONSUMER_SECRET=<ADD_YOUR_CONSUMER_SECRET>"
      - "NGSI_LD_PREFIX="
      - "SECURE_ENDPOINTS=true"
      - "KEYROCK_URL=http://localhost"
      - "KEYROCK_IP_ADDRESS=http://keyrock"
      - "KEYROCK_PORT=${KEYROCK_PORT}"
      - "KEYROCK_CLIENT_ID=${KEYROCK_CLIENT_ID}"
      - "KEYROCK_CLIENT_SECRET=${KEYROCK_CLIENT_SECRET}"
      - "CALLBACK_URL=http://localhost:${TUTORIAL_APP_PORT}/login"

  # Sample Express App
  express-app:
    build: ../express-app/.
    container_name: fiware-express-app
    hostname: express-app
    networks:
      - default
    ports:
      - "${EXPRESS_APP_PORT}:${EXPRESS_APP_PORT}" # localhost:8000
    healthcheck: 
      test: curl -f http://express-app:${EXPRESS_APP_PORT} || exit 1
  
  # PEP Proxy for Express App
  express-app-proxy:
    #image: pep-slim
    image: fiware/pep-proxy:${WILMA_VERSION}
    container_name: fiware-express-app-proxy
    hostname: express-app-proxy
    networks:
      - default
    depends_on:
      keyrock:
        condition: service_started
    deploy:
      restart_policy:
        condition: on-failure
    ports:
      - "${EXPRESS_APP_PROXY_PORT}:${EXPRESS_APP_PROXY_PORT}" # localhost:8001
    expose:
      - "${EXPRESS_APP_PROXY_PORT}"
    environment:
      - DEBUG=pep-proxy:*
      - PEP_PROXY_DEBUG=true
      - PEP_PROXY_APP_HOST=express-app
      - PEP_PROXY_APP_PORT=${EXPRESS_APP_PORT}
      - PEP_PROXY_PORT=${EXPRESS_APP_PROXY_PORT}
      - PEP_PROXY_IDM_HOST=keyrock
      - PEP_PROXY_HTTPS_ENABLED=false
      - PEP_PROXY_AUTH_ENABLED=false
      - PEP_PROXY_IDM_SSL_ENABLED=false
      - PEP_PROXY_IDM_PORT=${KEYROCK_PORT}
      - PEP_PROXY_APP_ID=${KEYROCK_CLIENT_ID}
      - PEP_PROXY_USERNAME=${PEP_PROXY_USERNAME}
      - PEP_PASSWORD=test
      - PEP_PROXY_PDP=idm
      - PEP_PROXY_MAGIC_KEY=1234
      - PEP_PROXY_PUBLIC_PATHS=/version
    healthcheck:
      interval: 50s

  # Sample Web App
  web-app:
    image: node:${NODE_VERSION}
    container_name: fiware-web-app
    hostname: web-app
    networks:
      - default
    ports:
      - "${WEB_APP_PORT}:${WEB_APP_PORT}" # localhost:8002
    command: node -e \
      "const PORT=${WEB_APP_PORT};
       var http=require('http');
       var parser=require('querystring');
       http.createServer(function(req, res) {
         if (req.url.startsWith('/test?')) {
           var test = parser.parse(req.url.replace('/test?', ''));
           if (test.t > 75) test._result = 'Possible short-circuit or spark-gap in device ' + test.d + '.';
           if (test.t < 25) test._result = 'Is device ' + test.d + ' shut down?';
           res.write(JSON.stringify(test));
         } else {
           if (req.url.startsWith('/v'))
             res.write('1.0.0, by Alerox 2022.');
           else
             res.write('<html>' +
               '<h1>Simple ADS</h1>' +
               '<h3>by Alerox, 2022</h3>' +
               'Usage <code>/test?d=device&t=temperature</code></html>');
         }
         res.end();
       }).listen(PORT);
       console.log(`Server started on port ${PORT}`);"
    healthcheck: 
      test: curl -f http://web-app:${WEB_APP_PORT} || exit 1
  
  # PEP Proxy for Web App
  web-app-proxy:
    #image: pep-slim
    image: fiware/pep-proxy:${WILMA_VERSION}
    container_name: fiware-web-app-proxy
    hostname: web-app-proxy
    networks:
      - default
    depends_on:
      keyrock:
        condition: service_started
    deploy:
      restart_policy:
        condition: on-failure
    ports:
      - "${WEB_APP_PROXY_PORT}:${WEB_APP_PROXY_PORT}" # localhost:8003
    expose:
      - "${WEB_APP_PROXY_PORT}"
    environment:
      - DEBUG=pep-proxy:*
      - PEP_PROXY_DEBUG=true
      - PEP_PROXY_APP_HOST=web-app
      - PEP_PROXY_APP_PORT=${WEB_APP_PORT}
      - PEP_PROXY_PORT=${WEB_APP_PROXY_PORT}
      - PEP_PROXY_IDM_HOST=keyrock
      - PEP_PROXY_HTTPS_ENABLED=false
      - PEP_PROXY_AUTH_ENABLED=false
      - PEP_PROXY_IDM_SSL_ENABLED=false
      - PEP_PROXY_IDM_PORT=${KEYROCK_PORT}
      - PEP_PROXY_APP_ID=${KEYROCK_CLIENT_ID}
      - PEP_PROXY_USERNAME=${PEP_PROXY_USERNAME}
      - PEP_PASSWORD=test
      - PEP_PROXY_PDP=idm
      - PEP_PROXY_MAGIC_KEY=1234
      - PEP_PROXY_PUBLIC_PATHS=/version
    healthcheck:
      interval: 50s

  # Node-RED for flow-programming automation
  node-red:
    build: ../node-red
    image: fiware/node-red
    container_name: fiware-node-red
    hostname: node-red
    networks:
      - default
    ports:
      - "${NODE_RED_PORT}:${NODE_RED_PORT}" # localhost:1880
    volumes:
      - node-red-data:/data

  # PEP Proxy for Node-RED
  node-red-proxy:
    #image: pep-slim
    image: fiware/pep-proxy:${WILMA_VERSION}
    container_name: fiware-node-red-proxy
    hostname: node-red-proxy
    networks:
      - default
    depends_on:
      keyrock:
        condition: service_started
    deploy:
      restart_policy:
        condition: on-failure
    ports:
      - "${NODE_RED_PROXY_PORT}:${NODE_RED_PROXY_PORT}" # localhost:1881
    expose:
      - "${NODE_RED_PROXY_PORT}"
    environment:
      - DEBUG=pep-proxy:*
      - PEP_PROXY_DEBUG=true
      - PEP_PROXY_APP_HOST=node-red
      - PEP_PROXY_APP_PORT=${NODE_RED_PORT}
      - PEP_PROXY_PORT=${NODE_RED_PROXY_PORT}
      - PEP_PROXY_IDM_HOST=keyrock
      - PEP_PROXY_HTTPS_ENABLED=false
      - PEP_PROXY_AUTH_ENABLED=false
      - PEP_PROXY_IDM_SSL_ENABLED=false
      - PEP_PROXY_IDM_PORT=${KEYROCK_PORT}
      - PEP_PROXY_APP_ID=${KEYROCK_CLIENT_ID}
      - PEP_PROXY_USERNAME=${PEP_PROXY_USERNAME}
      - PEP_PASSWORD=test
      - PEP_PROXY_PDP=idm
      - PEP_PROXY_MAGIC_KEY=1234
      - PEP_PROXY_PUBLIC_PATHS=/version
    healthcheck:
      interval: 50s


  # Databases
  mongo-db:
    image: mongo:${MONGO_DB_VERSION}
    hostname: mongo-db
    container_name: db-mongo
    networks:
      - default
    expose:
      - "${MONGO_DB_PORT}"
    ports:
      - "${MONGO_DB_PORT}:${MONGO_DB_PORT}" # localhost:27017
    command: --nojournal
    volumes:
      - mongo-db:/data/db
      - mongo-db-config:/data/configdb
#     - ../mongo-config/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    healthcheck:
      test: |
        mongo --quiet mongo-db/test --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)' && echo 0 || echo 1
#       host=`hostname --ip-address || echo '127.0.0.1'`; 
#       mongo --quiet $host/test --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)' && echo 0 || echo 1
      interval: 25s
    
  mongo-express:
    restart: always
    image: mongo-express:${MONGO_EXPRESS_VERSION}
    container_name: mongo-express
    depends_on:
      mongo-db:
        condition: service_healthy
    hostname: mongo-express
    networks:
      - default
    ports:
      - "${MONGO_EXPRESS_PORT}:${MONGO_EXPRESS_PORT}" # localhost:8081
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo-db
    healthcheck:
      test: "curl -f localhost:${MONGO_EXPRESS_PORT} || exit 1"
      interval: 25s
      timeout: 5s
      retries: 20

  mysql-db:
  # cat backup.sql | docker exec -i db-mysql /usr/bin/mysql -u root --password=secret idm
    restart: always
    image: mysql:${MYSQL_DB_VERSION}
    hostname: mysql-db
    container_name: db-mysql
    networks:
      - default
    expose:
      - "${MYSQL_DB_PORT}"
    ports:
      - "${MYSQL_DB_PORT}:${MYSQL_DB_PORT}" # localhost:3306
    environment:
      - "MYSQL_ROOT_PASSWORD_FILE=/run/secrets/my_secret_data"
      - "MYSQL_ROOT_HOST=%" # Allow any container to access this database
    volumes:
      - mysql-db:/var/lib/mysql
      - ../mysql-data:/docker-entrypoint-initdb.d/:ro
    secrets:
      - my_secret_data
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

networks:
  default:

volumes:
  mysql-db: ~
  mongo-db: ~
  mongo-db-config: ~
  node-red-data: ~

secrets:
  my_secret_data:
    file: ../secrets.txt
